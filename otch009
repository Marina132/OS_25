Работа с pipe. Часть 1

Для работы с пайпом можно воспользоваться системными вызовами write() для записи и read() для чтения аналогично тому как это делалось для записи в фаул и чтения из файла. Различия в том, что при чтении из файла информация не исчезает, а байт, прочитанный из пайпа удаляется.
Для создания используется системный вызов pipe(), которому в качестве параметра должен быть передан массив из двух целых чисел. Элекмент массива с индексом 0 используется как файловый дескриптор для чтения, а элемент с индексом 1 используется для записи.
Пример:
int fd[2];
pipe(fd);

Таблица файловых дескрипторов наследуется дочерним процессом от родительского, поэтому процесс-ребенок может отправлять информацию через пайп лбюбому из своих предков, так же, как и читать информацию, отправленную ими в пайп.
Пайп существует до тех пор, пока хотя бы  один из его потоков не закрыт. Для этого нужно, чтобы каждый родственный процесс завершил работу или в процессе работы явно закрыл входной и выходной потоки

Работа с pipe. Часть 2
Двунаправленная связь между родственными процессами

Для организации двунаправленной связи легче всего использовать два отдельных канала связи - пайп1 и пайп2. Пайп1 будет передавать информацию от процесса родителя процессу ребенку, а пайп1 - в обратнгом направлении.
Файловые дескрипторы разных пайпов будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток пайп1 (close(fd1[0]), а также выходной поток пайп2 (close(fd2[1]))
Для дочернего процесса закрываем выходной поток пайп1 и входной пайп2.
После записи информации в пайп1 родительским процессом выполняетя чтение информации из пайп2. При этом дочерний процесс еще ничего не записал в пайп2. Поэтому родительский процесс при попытки чтении из пайп2 блокируется и ждет появления информации.
Информация от дочернего процесса в пайп2 появляется после того, как процесс-ребенок прочитает информацию из пайп1
Поэтому дочерний процесс заканчивает работу раньше чем процесс родитель прочитает информацию от него из пайп2
1
Результат выполнения программы pr009m2.out:

Читаем строку, отправленную процессом ребенком
Читаем строку, отправленную процессом ребенком
Строка, прочитанная дочерним процессам: Информация от дочернего процесса для родителя
Процесс ребенок завершил работу
Прочитанная родителем строка: Информация от родительского процесса для ребенка
Процесс родитель завершил работу
