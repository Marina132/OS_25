Работа с pipe. Часть 1

Для работы с pipe можно воспользоваться системными вызовами write() для записи и read() для чтения аналогично тому как это делалось для записи в файл и чтения из файла. Различие в том, что при чтении из файла информация не исчезает, а байт, прочитанный из pipe, удаляется.
Для создания pipe используется системный вызов pipe(), которому в качестве параметра должен быть передан массив из двуъ целых чисел. Элемент массива с индексом 0 используется как файловый дескриптор для чтения, а элемент с индексом 1 используется для записи.
Пример:
int fd[2];
pipe(fd);

Таблица файловых дескрипторов наследуется дочерним процессом от родительского, поэтому процесс-ребенок может отправлять информацию через pipe к любому из своих предков, так же, как и читать информацию, отправленную ими в pipe.

Pipe существует до тех пор, пока хотя бы один из его потоков не закрыт. Для этого нужно, чтобы каждый родственный процесс завершил работу или в процессе работы явно закрыл входной и выходной потоки




Работа с pipe. Часть 2. Двунаправленная связь между родственными процессами

Для организации двунаправленной связи лучше всего использовать два отдельных канала связи - pipe1 и pipe2. pipe1 будет передавать информацию от процесса-родителя процессу-ребенку, а pipe2 - в обратном направлении.
Файловые дескрипторы разных pipe`ов будем хранить в массивах fd1 и fd2.
Для родительского процесса сразу закрываем входной поток pipe1 (close(fd1[0])), а также выходной поток pipe2 (close(fd2[1])).
Для дочернего процесса закрываем выходной поток pipe1 и входной поток pipe2.
После записи информации в pipe1 родительским процессом выполняется чтение информации из pipe2, при этом дочерний процесс еще ничего не записал в pipe2. Поэтому родительский процесс при попытке  чтения из pipe2 блокируется и ждет появления информации.
Информация от дочернего процесса в пайп2 появляется после того, как процесс-ребенок прочиатет информацию из pipe1.
Поэтому дочерний процесс заканчивает работу раньше, чем процесс-родитель прочитает информацию от него из pipe2

Результат выполнения программы pr009m2.out:
Читаем строку, отправленную процессом ребенком...
Строка, написанная дочерним процессом: Информация для дочернего процесса от родителя
Процессе-ребенок заверщил работу
Прочитанная родителем строка: Информация для родительского процесса от родителя
Процесс родитель завершил работу
