Исследование поведения программы с процессом-родителем и процессом-ребенком, выполняющими разные действия
Цель: выяснить по поведению процессов, насколько процесс ребенок независим от процесса-родителя

Исходный код программы:

//Программа. пораждающая дочерний процесс (часть 2).
//Процесс-родитель и процесс-ребенок должны выполнять разные действия
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
        pid_t procid, pprocid;
        int a=0, b;
        procid = getpid();
        pprocid = getppid();
        printf("Перед вызовом fork()\n");
        printf("Ид. текущю процесса: %d\nИд.род.процесса: %d\n", procid, pprocid);
        printf("Начальное значение а: %d\n", a);
        b = fork();
        if (b<0) {
                //Во время выполнения fork() произошла ошибка.Выходим из программы с возвратом кода -1
                printf("Ошибка при выполнении fork()\n");
                exit(-1);//выход из программы
        }
        else if (b==0) {
                printf("\n\nПоявился дочерний,поцесс получил значение %d\n", b);
                a = a+1; //Проверяем извенение значения переменной а
                procid = getpid();
                pprocid = getppid();
                printf("После вызова fork() в процессе-ребенке\n");
                printf("Ид. текущю процесса: %d\nИд.род.процесса: %d\nНовое значение а: %d\n", procid, pprocid, a);
        }
        else {
                printf("\n\nРодительский процесс после вызова fork() получил индефекатор ребенка %d\n", b);
                a = a+1111; //Проверяем извенение значения переменной а
                procid = getpid();
                pprocid = getppid();
                printf("Индефекаторы процесса-родителя:\n");
                printf("Ид. текущю процесса: %d\nИд.род.процесса: %d\nНовое значение а: %d\n", procid, pprocid, a);
        }
        return 0;
}

Результат выполнения программы:
--------------------

Перед вызовом fork()
Ид. текущю процесса: 17761
Ид.род.процесса: 17669
Начальное значение а: 0


Родительский процесс после вызова fork() получил индефекатор ребенка 17762
Индефекаторы процесса-родителя:
Ид. текущю процесса: 17761
Ид.род.процесса: 17669
Новое значение а: 1111


Появился дочерний,поцесс получил значение 0
После вызова fork() в процессе-ребенке
Ид. текущю процесса: 17762
Ид.род.процесса: 17761
Новое значение а: 1

--------------------
Значение переменной а внутри процесса-ребенка не зависит от значение переменной а внутри процесса-родителя. Из чего можно сделать вывод, что ребенок и родитель выполняются в отдельных адресных пространствах.
